#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

# The preprocess block is used to generate dynamic pages, like archives,
# tag pages and meta-pages that are simple to generate, like the sitemap
# or feed.
#
# Simply create a new item, add it to the @items stack and you're set.
# Note: the preprocess block has no item context, so you cannot just call
# xml_sitemap or atom_feed directly. Instead, embed it in a string and filter
# that with erb.
preprocess do
  def create_sitemap
    # Make items that should not appear in the sitemap hidden.
    # This by default works on all image files and typical assets,
    # as well as error pages and htaccess.
    # The is_hidden attribute is only explicitly set if it is absent,
    # allowing per-file overriding.
    @items.each do |item|
      if %w{png gif jpg jpeg css xml js txt}.include?(item[:extension]) ||
         item.identifier =~ /404|500|htaccess/
        item[:is_hidden] = true unless item.attributes.has_key?(:is_hidden)
      end
    end

    # Generate default sitemap
    @items << Nanoc3::Item.new(
      "<%= xml_sitemap %>",
      { :extension => 'xml' },
      '/sitemap/'
    )
  end

  def create_webmaster_tools_authentications
    @site.config[:webmaster_tools].each do |file|
      next if file[:identifier].nil?
      content    = file.delete(:content)
      identifier = file.delete(:identifier)
      file.merge({ :is_hidden => true })
      @items << Nanoc3::Item.new(
        content,
        file,
        identifier
      )
    end
  end

  def create_robots_txt
    if @site.config[:robots]
      content = if @site.config[:robots][:default]
        "User-agent: *\nDisallow: /assets\nAllow: /assets/images\nSitemap: /sitemap.xml"
      else
        [
          'User-Agent: *',
          @site.config[:robots][:disallow].map { |l| "Disallow: #{l}" },
          @site.config[:robots][:allow].map { |l| "Allow: #{l}" },
          "Sitemap: #{@site.config[:robots][:sitemap]}"
        ].flatten.compact.join("\n")
      end
      @items << Nanoc3::Item.new(
        content,
        { :extension => 'txt', :is_hidden => true },
        '/robots/'
      )
    end
  end

  create_robots_txt
  create_webmaster_tools_authentications
  create_sitemap
end

# The base javascript and stylesheet files
compile %r{/assets/(lib|styles)/} do
  # Use erb to enable timestamps and author information and such.
  filter :erb
  filter :jslint if @item[:extension] == 'js' && @site.config[:jslint]
  filter :concat
  filter :cache_buster if @site.config[:cache_busting]
  filter :less if @item[:extension] == 'less'
  filter :minify
end

# Don't filter or layout any google files, robots.txt, error pages or anything
# else in the assets directory.
compile %r{^/(google|robots|404|500|assets)} do
end

# Sitemap and htaccess do get filtered with erb, but get no layout.
compile %r{^/(sitemap|htaccess)/$} do
  filter :erb
end

compile '*' do
  filter :erb
  filter :kramdown if item[:extension] == 'md'
  filter :typogruby
  filter :cache_buster if @site.config[:cache_busting]
  layout 'default'
end

route '/' do
  '/index.html'
end

route '/htaccess/' do
  '/.htaccess'
end

route %r{^/(assets/.*|sitemap|robots|atom)/$} do
  item.identifier.chop + '.' + item[:extension]
end

route '*' do
  item.identifier.chop + '.html'
end

layout '*', :erb
